version: '3.8'

services:
  pve-manager:
    build: .
    container_name: pve-manager
    ports:
      - "${PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - TZ=${TZ:-Asia/Shanghai}
    volumes:
      # 数据持久化
      - pve_data:/app/server/data
      - pve_logs:/app/logs
      # 配置文件（可选）
      - ./config:/app/config:ro
    restart: unless-stopped
    networks:
      - pve-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pve-manager.rule=Host(\`${DOMAIN:-localhost}\`)"
      - "traefik.http.services.pve-manager.loadbalancer.server.port=3000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # 反向代理 (可选，用于前端)
  nginx:
    image: nginx:alpine
    container_name: pve-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - pve-manager
    restart: unless-stopped
    networks:
      - pve-network
    profiles:
      - with-nginx

  # PostgreSQL数据库 (可选升级)
  postgres:
    image: postgres:15-alpine
    container_name: pve-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-pvemanager}
      - POSTGRES_USER=${DB_USER:-pveuser}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - pve-network
    profiles:
      - with-postgres

  # Redis缓存 (可选)
  redis:
    image: redis:7-alpine
    container_name: pve-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - pve-network
    profiles:
      - with-redis

networks:
  pve-network:
    driver: bridge

volumes:
  pve_data:
    driver: local
  pve_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local